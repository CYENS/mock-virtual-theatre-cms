  """
  Represents a user of the system.
  """
  
  scalar DateTime
  
  """
  Motion data for a particular avatar.
  """
  type AvatarMotionData {
    id: ID!
    session: Session
    pCloudFileId: Int
    fileUrl: String
    initialPositionX: Float
    initialPositionY: Float
    initialPositionZ: Float
    initialRotationX: Float
    initialRotationY: Float
    initialRotationZ: Float
    avatar: Avatar
  }

  """
  Light data for a scene, containing position, type, and other light characteristics.
  """
  type LightData {
    id: ID!
    session: Session
    pCloudFileId: Int
    fileUrl: String
    lightId: Int
    initialPositionX: Float
    initialPositionY: Float
    initialPositionZ: Float
    initialRotationX: Float
    initialRotationY: Float
    initialRotationZ: Float
    lightType: String
    lightCharacteristicsJson: String
  }

  """
  Face data for a particular avatar.
  """
  type FaceData {
    id: ID!
    session: Session
    pCloudFileId: Int
    fileUrl: String
    avatar: Avatar
  }
  
  """
  Audio data for a particular avatar.
  """
  type AudioData {
    id: ID!
    session: Session
    pCloudFileId: Int
    fileUrl: String
    avatar: Avatar
  }


  """
  The prop motion in the scene, with its initial transform (position, rotation, scale).
  """
  type PropMotionData {
    id: ID!
    pCloudFileId: Int
    fileUrl: String
    session: Session
    initialPositionX: Float
    initialPositionY: Float
    initialPositionZ: Float
    initialRotationX: Float
    initialRotationY: Float
    initialRotationZ: Float
  }


  """
  A Session is a live/recorded session that references a user (owner),
  a performance, and various data IDs for motion, face, light, audio, and propMotionData.
  """
  type Session {
    id: ID!
    eosSessionId: String
    title: String
    state: String
    owner: User
    scene: USDScene
    xrLive: XR_Live
    performance: Performance
    motionData: [AvatarMotionData]
    faceData: [FaceData]
    lightData: [LightData]
    audioData: [AudioData]
    propMotionData: [PropMotionData]
    attendees: [User]
    castAvatars: [SessionCast]
  }

  type Person {
    id: ID!   
    givenName: String
    familyName: String
    artisticName: String
  }
  
  type User {
    id: ID!
    name: String
    email: String
    eosId: String
    userRole: String
    isAdmin: Boolean
    isSuperAdmin: Boolean
    createdAt: DateTime
    person: Person
    performances: [Performance]
    avatars: [Avatar]
    sessionsOwned: [Session]
    sessionAttendance: [Session]
  }

  type UserAttendance {
    user: User
    session: Session
  }
  
  """
  input used for creating a user
  """
  input UserCreateInput {
    eosId: ID
    name: String
    email: String
    password: String
    userRole: String
    isAdmin: Boolean
    isSuperAdmin: Boolean
    createdAt: DateTime
  }
  
  """
  input used for creating a performance
  """
  input PerformanceCreateInput {
    ownerId: ID!
    title: String!
    about: String
  }
  
  
  """
  input used for querying user
  """
  input UserWhereUniqueInput {
    id: ID
    eosId: ID
    email: String
  }
  
  input PerformanceWhereUniqueInput {
    id: ID
  }
  
  """
  A scene that can be linked to one or multiple performances.
  """
  type USDScene {
    id: ID!
    pCloudFileId: Int
    fileUrl: String
    title: String
    owner: User
    members: [User]
    template: Boolean
    public: Boolean
    performances: [Performance]
  }

  type USDAssetLibrary {
    id: ID!
    pCloudFileId: Int
    assetLibraryJson: String
  }

  type XR_Live {
    id: ID!
    streamingUrl: String
  }
  
  """
  A performance, which belongs to a user and can contain multiple usdScenes and avatars.
  """
  type Performance {
    id: ID!
    title: String
    about: String
    owner: User
    members: [User]
    usdScenes: [USDScene]
    sessions: [Session]
    avatars: [Avatar]
  }
  
  """
  An avatar belongs to exactly one user and can appear in multiple performances.
  """
  type Avatar {
    id: ID!
    name: String
  }

  type SessionState {
    id: ID!
    name: String
  }

  type SessionCast {
    session: Session
    user: User
    avatar: Avatar
  }

  type Query {
    persons: [Person]
    
    # Users
    users: [User]
    userById(id: ID): User
    user(where: UserWhereUniqueInput!): User
    
    userAttendances: [UserAttendance]

    # Scenes
    usdScenes: [USDScene]
    sceneById(id: ID): USDScene
    
    usdAssetLibraries: [USDAssetLibrary]

    xrLives: [XR_Live]
    
    # Performances
    performances: [Performance]
    performanceById(id: ID): Performance
    performance(where: PerformanceWhereUniqueInput!): Performance

    # Avatars
    avatars: [Avatar]
    avatarById(id: ID): Avatar

    # Sessions
    sessions: [Session]
    sessionById(id: ID): Session
    sessionByState(state: String): [Session]
    
    sessionCasts: [SessionCast]
    
    avatarMotionData: [AvatarMotionData]
    faceData: [FaceData]
    lightData: [LightData]
    audioData: [AudioData]
    propMotionData: [PropMotionData]
  }
  
  type Mutation {
    createSession(
      title: String!
      ownerId: ID!
      performanceId: ID!
      state: String!
      eosSessionId: String = ""
      motionDataId: ID
      faceDataId: ID
      lightDataId: ID
      audioDataId: ID
      propDataId: ID
      streamingUrl: String
    ): Session
    
    createUser(data: UserCreateInput!): User
    
    createPerformance(data: PerformanceCreateInput!): Performance
    deletePerformance(where: PerformanceWhereUniqueInput!): Performance
    
    """
    Create a new session state entry
    """
    createSessionState(name: String!): SessionState

    """
    Update an existing session state by ID
    """
    updateSessionState(id: ID!, name: String!): SessionState

    """
    Delete an existing session state by ID
    Returns true if a row was deleted
    """
    deleteSessionState(id: ID!): Boolean
  }
